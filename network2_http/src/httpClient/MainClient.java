package httpClient;

import java.awt.Desktop;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
//import sun.net.www.http.HttpClient;
//import sun.security.util.Password;

/**
 *
 * @author Yazan Habash
 */
public class MainClient extends javax.swing.JFrame {

    // Attributes
    public String dataStr;
    public static boolean allow = false;
    String[] strURLs = {
        "http://localhost:8080/my-site2/index.php",
        "Servlet"
    };
    
    
    // Methods
    void addURLsToCombo() {
        this.jComboBox1.removeAllItems();
        for (int i = 0; i < strURLs.length; ++i) {
            this.jComboBox1.addItem(strURLs[i]);
        }
        this.jComboBox1.setSelectedIndex(0);
        String str = (String) this.jComboBox1.getSelectedItem();
        // this.jTextField1.setText(str);
    }

    public MainClient() {
        initComponents();
        addURLsToCombo();
        jComboBox2.removeAllItems();
        add_image_name();
        jComboBox3.removeAllItems();
        add_text_name();
        jComboBox4.removeAllItems();
        add_pdf_name();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        Button_upload_image = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        Button_upload_text_file = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        Button_download_text_file = new javax.swing.JToggleButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        Button_download_pdf = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        Button_upload_pdf = new javax.swing.JToggleButton();
        jLabel10 = new javax.swing.JLabel();
        Button_select_server = new javax.swing.JButton();
        Button_download_image = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Button_login = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 350, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("URL:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 70, 40));

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 350, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("choosen URL");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("images");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, 30));

        jComboBox2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 350, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("images");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, 30));

        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 350, 30));

        Button_upload_image.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_upload_image.setText("Upload");
        Button_upload_image.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_upload_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_upload_imageActionPerformed(evt);
            }
        });
        getContentPane().add(Button_upload_image, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, 100, 30));

        statusTextArea.setColumns(20);
        statusTextArea.setRows(5);
        jScrollPane1.setViewportView(statusTextArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 506, 270, 50));
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 330, 310, 220));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Text file");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 350, 30));

        Button_upload_text_file.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_upload_text_file.setText("Upload");
        Button_upload_text_file.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_upload_text_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_upload_text_fileActionPerformed(evt);
            }
        });
        getContentPane().add(Button_upload_text_file, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 210, 100, 30));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Text files");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, -1));

        jComboBox3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 350, 30));

        Button_download_text_file.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_download_text_file.setText("Download");
        Button_download_text_file.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_download_text_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_download_text_fileActionPerformed(evt);
            }
        });
        getContentPane().add(Button_download_text_file, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, 100, 30));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("PDF");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, 30, 30));
        getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 350, 30));

        Button_download_pdf.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_download_pdf.setText("Download");
        Button_download_pdf.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_download_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_download_pdfActionPerformed(evt);
            }
        });
        getContentPane().add(Button_download_pdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 250, 100, 30));

        jComboBox4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 350, 30));

        Button_upload_pdf.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_upload_pdf.setText("Upload");
        Button_upload_pdf.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_upload_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_upload_pdfActionPerformed(evt);
            }
        });
        getContentPane().add(Button_upload_pdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, 100, 30));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("PDF");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 290, -1, 30));

        Button_select_server.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_select_server.setText("Select");
        Button_select_server.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_select_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_select_serverActionPerformed(evt);
            }
        });
        getContentPane().add(Button_select_server, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 100, 30));

        Button_download_image.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_download_image.setText("Download");
        Button_download_image.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_download_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_download_imageActionPerformed(evt);
            }
        });
        getContentPane().add(Button_download_image, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, 100, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Username");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 347, 70, 30));
        getContentPane().add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 210, 30));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Password");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 410, 70, -1));

        Button_login.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Button_login.setText("Login");
        Button_login.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Button_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_loginActionPerformed(evt);
            }
        });
        getContentPane().add(Button_login, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 440, 110, 30));

        jPasswordField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(jPasswordField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, 210, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 650, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String contentStr = "application/x-www-form-urlencoded";

    public void add_image_name() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/http_project", "root", "");
            Statement s = c.createStatement();
            String q = "SELECT name FROM image";
            ResultSet sr = s.executeQuery(q);
            while (sr.next()) {
                jComboBox2.addItem(sr.getString("name"));
            }
            c.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void add_text_name() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/http_project", "root", "");
            Statement s = c.createStatement();
            String q = "SELECT name FROM text_file";
            ResultSet sr = s.executeQuery(q);
            while (sr.next()) {
                jComboBox3.addItem(sr.getString("name"));
            }
            c.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void add_pdf_name() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/http_project", "root", "");
            Statement s = c.createStatement();
            String q = "SELECT name FROM pdf";
            ResultSet sr = s.executeQuery(q);
            while (sr.next()) {
                jComboBox4.addItem(sr.getString("name"));
            }
            c.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void Button_upload_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_upload_imageActionPerformed
        if (allow) {
            try {
                OutputStream os;
                InputStream is;
                JFileChooser choose = new JFileChooser();
                choose.showOpenDialog(null);
                File f = choose.getSelectedFile();
                String filename = f.getAbsolutePath();
                jTextField2.setText(filename);
                HttpURLConnection conn = null;
                DataOutputStream dos = null;
                String lineEnd = "\r\n";
                String twoHyphens = "--";
                String boundary = "*****";
                int bytesRead, bytesAvailable, bufferSize;
                byte[] buffer;
                int maxBufferSize = 1 * 1024 * 1024;
                File sourceFile = new File(filename);
                FileInputStream fileInputStream = new FileInputStream(sourceFile);

                URL url = null;
                if (jTextField1.getText().compareTo("Servlet") == 0) {
                    url = new URL("http://localhost:8081/network2_http_s/upload_image");
                } else {
                    url = new URL(jTextField1.getText());
                }

                // Open a HTTP  connection to  the URL
                conn = (HttpURLConnection) url.openConnection();
                conn.setDoInput(true); // Allow Inputs
                conn.setDoOutput(true); // Allow Outputs
                conn.setUseCaches(false); // Don't use a Cached Copy
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("ENCTYPE", "multipart/form-data");
                conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
                conn.setRequestProperty("uploaded_image", filename);

                dos = new DataOutputStream(conn.getOutputStream());

                dos.writeBytes(twoHyphens + boundary + lineEnd);
                dos.writeBytes("Content-Disposition: form-data; name=uploaded_image;filename="
                        + filename + "" + lineEnd);

                dos.writeBytes(lineEnd);

                bytesAvailable = fileInputStream.available();

                bufferSize = Math.min(bytesAvailable, maxBufferSize);
                buffer = new byte[bufferSize];

                // read file and write it into form...
                bytesRead = fileInputStream.read(buffer, 0, bufferSize);

                while (bytesRead > 0) {
                    dos.write(buffer, 0, bufferSize);
                    bytesAvailable = fileInputStream.available();
                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
                    bytesRead = fileInputStream.read(buffer, 0, bufferSize);
                }

                int serverResponseCode = 0;
                // Send multipart form data necesssary after file data...
                dos.writeBytes(lineEnd);
                dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
                serverResponseCode = conn.getResponseCode();
                String serverResponseMessage = conn.getResponseMessage();

                int b = -1;
                dos.close();
                String SS = "";
                if (conn.getResponseCode() == 404) {
                    System.out.println("error!");
                }

                if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                        while ((b = bufferedReader.read()) != -1) {
                            SS = SS + (char) b;
                        }
                    }
                    BufferedImage image = ImageIO.read(new File(filename));
                    ImageIcon icon = new ImageIcon(image);
                    int h = icon.getIconHeight();
                    int w = icon.getIconWidth();
                    if (h > 220) {
                        h = 220;
                    }
                    if (w > 310) {
                        w = 310;
                    }
                    icon = new ImageIcon(icon.getImage().getScaledInstance(w, h, Image.SCALE_DEFAULT));
                    jLabel6.setIcon(icon);
                }
                statusTextArea.setText(SS);
                jComboBox2.removeAllItems();
                add_image_name();

                //  Desktop.getDesktop().open(new java.io.File("text_file/rahaf.txt"));
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ProtocolException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_Button_upload_imageActionPerformed

    private void Button_upload_text_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_upload_text_fileActionPerformed
        if (allow) {
            try {
                // TODO add your handling code here:
                OutputStream os;
                InputStream is;
                JFileChooser choose = new JFileChooser();
                choose.showOpenDialog(null);
                File f = choose.getSelectedFile();
                String filename = f.getAbsolutePath();
                jTextField3.setText(filename);

                HttpURLConnection conn = null;
                DataOutputStream dos = null;
                String lineEnd = "\r\n";
                String twoHyphens = "--";
                String boundary = "*****";
                int bytesRead, bytesAvailable, bufferSize;
                byte[] buffer;
                int maxBufferSize = 1 * 1024 * 1024;
                File sourceFile = new File(filename);
                FileInputStream fileInputStream = new FileInputStream(sourceFile);
                URL url = null;
                if (jTextField1.getText().compareTo("Servlet") == 0) {
                    url = new URL("http://localhost:8081/network2_http_s/upload_txt");
                } else {
                    url = new URL(jTextField1.getText());
                }
                // Open a HTTP  connection to  the URL
                conn = (HttpURLConnection) url.openConnection();
                conn.setDoInput(true); // Allow Inputs
                conn.setDoOutput(true); // Allow Outputs
                conn.setUseCaches(false); // Don't use a Cached Copy
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("ENCTYPE", "multipart/form-data");
                conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
                conn.setRequestProperty("uploaded_file", filename);

                dos = new DataOutputStream(conn.getOutputStream());

                dos.writeBytes(twoHyphens + boundary + lineEnd);
                dos.writeBytes("Content-Disposition: form-data; name=uploaded_file;filename="
                        + filename + "" + lineEnd);

                dos.writeBytes(lineEnd);

                bytesAvailable = fileInputStream.available();

                bufferSize = Math.min(bytesAvailable, maxBufferSize);
                buffer = new byte[bufferSize];

                // read file and write it into form...
                bytesRead = fileInputStream.read(buffer, 0, bufferSize);

                while (bytesRead > 0) {
                    dos.write(buffer, 0, bufferSize);
                    bytesAvailable = fileInputStream.available();
                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
                    bytesRead = fileInputStream.read(buffer, 0, bufferSize);
                }
                int serverResponseCode = 0;
                // send multipart form data necesssary after file data...
                dos.writeBytes(lineEnd);
                dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
                serverResponseCode = conn.getResponseCode();
                String serverResponseMessage = conn.getResponseMessage();

                int b = -1;
                dos.close();
                String SS = "";
                if (conn.getResponseCode() == 404) {
                    System.out.println("error!");
                }
                if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                        while ((b = bufferedReader.read()) != -1) {
                            SS = SS + (char) b;
                        }
                    }
                }
                statusTextArea.setText(SS);
                jComboBox3.removeAllItems();
                add_text_name();

                //  Desktop.getDesktop().open(new java.io.File("text_file/rahaf.txt"));
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ProtocolException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_Button_upload_text_fileActionPerformed

    private void Button_download_text_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_download_text_fileActionPerformed
        if (allow) {
            String url = "";
            if (jTextField1.getText().compareTo("Servlet") == 0) {
                url = "http://localhost:8081/network2_http_s/download_txt";
                download_text_servlet(url);
            } else {
                url = jTextField1.getText();
                download_text_php(url);
            }
        }
    }//GEN-LAST:event_Button_download_text_fileActionPerformed

    private void download_text_php(String url) {
        try {
            String text = jComboBox3.getSelectedItem().toString();
            dataStr = "";
            OutputStream os;
            InputStream is;

            URL u = new URL(url);

            HttpURLConnection myConn = (HttpURLConnection) u.openConnection();
            myConn.setDoOutput(true);
            myConn.setRequestMethod("POST");
            myConn.setDoInput(true);
            myConn.setRequestProperty("Content-Type", contentStr);
            myConn.setUseCaches(false);
            dataStr = URLEncoder.encode("download_text", "UTF-8") + "=" + URLEncoder.encode(text, "UTF-8") + "&" + URLEncoder.encode("id", "UTF-8") + "=" + "2";
            BufferedOutputStream out = new BufferedOutputStream(myConn.getOutputStream());
            out.write(dataStr.getBytes());//"ACTION=add&NUMPTS=2&DATA=L0001\nL0002");
            out.close();
            String SS = "";
            int b = -1;

            String t = "";
            is = myConn.getInputStream();

            byte tmp[] = new byte[1024];
            is = myConn.getInputStream();
            ByteArrayOutputStream O = new ByteArrayOutputStream();
            int n = 0;

            // File f = new File("C:/Users/Rahaf/Documents/NetBeansProjects/network2_http/images/"+selected_image);
            FileOutputStream myWriter = new FileOutputStream("C:/Users/HP/" + text);
            if (myConn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(myConn.getInputStream()))) {
                    while (-1 != (n = is.read(tmp))) {
                        //SS = SS + (char) b;
                        O.write(tmp, 0, n);
                    }
                    byte[] r = O.toByteArray();
                    myWriter.write(r);
                    myWriter.close();
                    is.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
                }

                //     jTextArea1.setText(SS);
                Desktop.getDesktop().open(new java.io.File("C:/Users/HP/" + text));
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void download_text_servlet(String url) {
        try {
            String text = jComboBox3.getSelectedItem().toString();
            dataStr = "";
            OutputStream os;
            InputStream is;

            URL u = new URL(url);

            HttpURLConnection myConn = (HttpURLConnection) u.openConnection();
            myConn.setDoOutput(true);
            myConn.setRequestMethod("POST");
            myConn.setDoInput(true);
            myConn.setRequestProperty("Content-Type", contentStr);
            myConn.setUseCaches(false);
            dataStr = URLEncoder.encode("download_text", "UTF-8") + "=" + URLEncoder.encode(text, "UTF-8");
            BufferedOutputStream out = new BufferedOutputStream(myConn.getOutputStream());
            out.write(dataStr.getBytes());//"ACTION=add&NUMPTS=2&DATA=L0001\nL0002");
            out.close();
            String SS = "";
            int b = -1;

            if (myConn.getResponseCode() == 404) {
                System.out.println("error!");
            }

            File f = new File("C:/Users/HP/" + text);
            FileOutputStream myWriter = new FileOutputStream(f);
            if (myConn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(myConn.getInputStream()))) {
                    while ((b = bufferedReader.read()) != -1) {
                        SS = SS + (char) b;
                        myWriter.write(b);
                    }
                    myWriter.close();
                }

                statusTextArea.setText(SS);
                if ((new File("C:/Users/HP/" + text)).exists()) {
                    Process p = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "C:/Users/HP/" + text);
                    p.waitFor();
                }
                //Desktop.getDesktop().open(new java.io.File("C:/Users/HP/"+text));
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void Button_upload_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_upload_pdfActionPerformed
        if (allow) {
            try {
                OutputStream os;
                InputStream is;
                JFileChooser choose = new JFileChooser();
                choose.showOpenDialog(null);
                File f = choose.getSelectedFile();
                String filename = f.getAbsolutePath();
                jTextField4.setText(filename);
                HttpURLConnection conn = null;
                DataOutputStream dos = null;
                String lineEnd = "\r\n";
                String twoHyphens = "--";
                String boundary = "*****";
                int bytesRead, bytesAvailable, bufferSize;
                byte[] buffer;
                int maxBufferSize = 1 * 1024 * 1024;
                File sourceFile = new File(filename);
                FileInputStream fileInputStream = new FileInputStream(sourceFile);
                URL url = null;
                if (jTextField1.getText().compareTo("Servlet") == 0) {
                    url = new URL("http://localhost:8081/network2_http_s/upload_pdf");
                } else {
                    url = new URL(jTextField1.getText());
                }

                // Open a HTTP  connection to  the URL
                conn = (HttpURLConnection) url.openConnection();
                conn.setDoInput(true); // Allow Inputs
                conn.setDoOutput(true); // Allow Outputs
                conn.setUseCaches(false); // Don't use a Cached Copy
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("ENCTYPE", "multipart/form-data");
                conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
                conn.setRequestProperty("uploaded_pdf", filename);

                dos = new DataOutputStream(conn.getOutputStream());

                dos.writeBytes(twoHyphens + boundary + lineEnd);
                dos.writeBytes("Content-Disposition: form-data; name=uploaded_pdf;filename="
                        + filename + "" + lineEnd);

                dos.writeBytes(lineEnd);

                bytesAvailable = fileInputStream.available();

                bufferSize = Math.min(bytesAvailable, maxBufferSize);
                buffer = new byte[bufferSize];

                // read file and write it into form...
                bytesRead = fileInputStream.read(buffer, 0, bufferSize);

                while (bytesRead > 0) {
                    dos.write(buffer, 0, bufferSize);
                    bytesAvailable = fileInputStream.available();
                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
                    bytesRead = fileInputStream.read(buffer, 0, bufferSize);
                }
                int serverResponseCode = 0;
                // send multipart form data necesssary after file data...
                dos.writeBytes(lineEnd);
                dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
                serverResponseCode = conn.getResponseCode();
                String serverResponseMessage = conn.getResponseMessage();

                int b = -1;
                dos.close();
                String SS = "";
                if (conn.getResponseCode() == 404) {
                    System.out.println("error!");
                }

                if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                        while ((b = bufferedReader.read()) != -1) {
                            SS = SS + (char) b;
                        }
                    }
                }
                statusTextArea.setText(SS);
                jComboBox4.removeAllItems();
                add_pdf_name();
                //  Desktop.getDesktop().open(new java.io.File("text_file/rahaf.txt"));
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ProtocolException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_Button_upload_pdfActionPerformed

    private void Button_download_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_download_pdfActionPerformed
        if (allow) {
            String url = "";
            if (jTextField1.getText().compareTo("Servlet") == 0) {
                url = "http://localhost:8081/network2_http_s/download_pdf";
                download_pdf_servlet(url);
            } else {
                url = jTextField1.getText();
                download_pdf_php(url);
            }
        }
    }//GEN-LAST:event_Button_download_pdfActionPerformed

    private void download_pdf_php(String url) {
        try {
            String selected_pdf = jComboBox4.getSelectedItem().toString();
            OutputStream os;
            InputStream is;
            URL u = new URL(url);
            HttpURLConnection myConn = (HttpURLConnection) u.openConnection();
            myConn.setDoOutput(true);
            myConn.setRequestMethod("POST");
            myConn.setDoInput(true);
            myConn.setRequestProperty("Content-Type", contentStr);
            myConn.setUseCaches(false);
            dataStr = URLEncoder.encode("download_pdf", "UTF-8") + "=" + selected_pdf + "&" + URLEncoder.encode("id", "UTF-8") + "=" + "3";
            BufferedOutputStream out = new BufferedOutputStream(myConn.getOutputStream());
            out.write(dataStr.getBytes());
            out.close();
            String SS = "";
            int b = -1;

            String t = "";
            byte tmp[] = new byte[1024];

            is = myConn.getInputStream();
            ByteArrayOutputStream O = new ByteArrayOutputStream();
            int n = 0;
            // File f = new File("C:/Users/Rahaf/Documents/NetBeansProjects/network2_http/images/"+selected_image);
            FileOutputStream myWriter = new FileOutputStream("C:/Users/HP/" + selected_pdf);
            if (myConn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(myConn.getInputStream()))) {
                    while (-1 != (n = is.read(tmp))) {
                        // SS = SS + (char) b;
                        //   tmp[m]=
                        O.write(tmp, 0, n);

                    }
                    byte[] r = O.toByteArray();
                    myWriter.write(r);
                    myWriter.close();
                    is.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
                }
                //   jTextArea1.setText(SS);
                Desktop.getDesktop().open(new java.io.File("C:/Users/HP/" + selected_pdf));
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void download_pdf_servlet(String url) {
        try {
            // TODO add your handling code here:
            String selected_pdf = jComboBox4.getSelectedItem().toString();
            OutputStream os;
            InputStream is;
            URL u = new URL(url);

            HttpURLConnection myConn = (HttpURLConnection) u.openConnection();
            myConn.setDoOutput(true);
            myConn.setRequestMethod("POST");
            myConn.setDoInput(true);
            myConn.setRequestProperty("Content-Type", contentStr);
            myConn.setUseCaches(false);
            dataStr = URLEncoder.encode("download_pdf", "UTF-8") + "=" + selected_pdf;
            BufferedOutputStream out = new BufferedOutputStream(myConn.getOutputStream());
            out.write(dataStr.getBytes());
            out.close();
            String SS = "";
            int b = -1;

            if (myConn.getResponseCode() == 404) {
                System.out.println("error!");
            }
            File f = new File("C:/Users/HP/" + selected_pdf);
            FileOutputStream myWriter = new FileOutputStream(f);

            if (myConn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(myConn.getInputStream()))) {
                    while ((b = bufferedReader.read()) != -1) {
                        SS = SS + (char) b;
                        myWriter.write(b);
                    }

                    myWriter.close();
                }
                statusTextArea.setText(SS);
                if ((new File("C:/Users/HP/" + selected_pdf)).exists()) {

                    Process p = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "C:/Users/HP/" + selected_pdf);
                    p.waitFor();
                }
                //Desktop.getDesktop().open(new java.io.File("C:/Users/HP/"+selected_pdf));
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void Button_select_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_select_serverActionPerformed
        String str = (String) this.jComboBox1.getSelectedItem();
        this.jTextField1.setText(str);
    }//GEN-LAST:event_Button_select_serverActionPerformed

    private void Button_download_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_download_imageActionPerformed
        if (allow) {
            String url = "";
            if (jTextField1.getText().compareTo("Servlet") == 0) {
                url = "http://localhost:8081/network2_http_s/download_image";
                download_image_servlet(url);
            } else {
                url = jTextField1.getText();
                download_image_php(url);
            }
        }
    }//GEN-LAST:event_Button_download_imageActionPerformed

    private void download_image_php(String url) {
        String selectedImage = jComboBox2.getSelectedItem().toString();
        new DownloadUploadImage(selectedImage).downloadPHP(url);
        putImage(selectedImage, true);
    }
    
    private void putImage(String selectedImage, boolean src) {
        try {
            //System.out.print(SS);
            File file = new File("C:/Users/HP/" + selectedImage);
            BufferedImage image = ImageIO.read(file);
            if(src)   // PHP
                ImageIO.write((BufferedImage) image, "jpg", file);
            ImageIcon icon = new ImageIcon(image);
            int h = icon.getIconHeight();
            int w = icon.getIconWidth();
            if (h > 220) {
                h = 220;
            }
            if (w > 310) {
                w = 310;
            }
            icon = new ImageIcon(icon.getImage().getScaledInstance(w, h, Image.SCALE_DEFAULT));
            jLabel6.setIcon(icon);
            Desktop.getDesktop().open(new java.io.File("C:/Users/HP/" + selectedImage));
        } catch (IOException ex) {
            Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void download_image_servlet(String url) {
        String selectedImage = jComboBox2.getSelectedItem().toString();
        new DownloadUploadImage(selectedImage).downloadServlet(url);
        putImage(selectedImage, false);
    }

    private void Button_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_loginActionPerformed
        String user = username.getText();
        String pass = jPasswordField1.getText();
        System.out.println(user + " " + pass);
        if (jTextField1.getText().compareTo("Servlet") == 0 || jTextField1.getText().compareTo("http://localhost:8080/my-site2/index.php") == 0) {

            if (user.compareTo("") == 0 || pass.compareTo("") == 0) {
                JOptionPane.showMessageDialog(this, "Make sure to fill all blanks");
            } else {
                try {
                    dataStr = "";
                    OutputStream os;
                    InputStream is;

                    String url = jTextField1.getText();
                    if (url.compareTo("Servlet") == 0) {
                        url = "http://localhost:8081/network2_http_s/login";
                    }
                    URL u = new URL(url);
                    HttpURLConnection myConn = (HttpURLConnection) u.openConnection();
                    myConn.setDoOutput(true);
                    myConn.setRequestMethod("POST");
                    myConn.setDoInput(true);
                    myConn.setRequestProperty("Content-Type", contentStr);
                    myConn.setUseCaches(false);
                    dataStr = URLEncoder.encode("user", "UTF-8") + "=" + URLEncoder.encode(user, "UTF-8") + "&" + URLEncoder.encode("pass", "UTF-8") + "=" + URLEncoder.encode(pass, "UTF-8");
                    BufferedOutputStream out = new BufferedOutputStream(myConn.getOutputStream());
                    out.write(dataStr.getBytes());
                    out.close();
                    String SS = "";
                    int b = -1;

                    if (myConn.getResponseCode() == 404) {
                        System.out.println("error!");
                    }
                    if (myConn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                        try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(myConn.getInputStream()))) {

                            if ((b = bufferedReader.read()) != -1) {
                                SS = SS + (char) b;
                            }
                        }
                        if (SS.equals("1")) {
                            allow = true;
                        } else {
                            allow = false;
                            JOptionPane.showMessageDialog(this, "Make sure login data is true");
                        }
                    }

                } catch (MalformedURLException ex) {
                    Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ProtocolException ex) {
                    Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Choose server first");
        }
    }//GEN-LAST:event_Button_loginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainClient().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_download_image;
    private javax.swing.JButton Button_download_pdf;
    private javax.swing.JToggleButton Button_download_text_file;
    private javax.swing.JButton Button_login;
    private javax.swing.JButton Button_select_server;
    private javax.swing.JToggleButton Button_upload_image;
    private javax.swing.JToggleButton Button_upload_pdf;
    private javax.swing.JButton Button_upload_text_file;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    public static javax.swing.JTextArea statusTextArea;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
